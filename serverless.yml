# For full config options, check the docs:
#    docs.serverless.com
#

service: fcbh-dataset-io

frameworkVersion: "3"
useDotenv: true
provider:
  name: aws
  iam:
    role: ${self:custom.lambdaExecutionRoleArn.${self:provider.stage}}
  vpc:
    securityGroupIds:
      - ${self:custom.securityGroupId.${self:provider.stage}}
    subnetIds:
      - ${self:custom.subnetId1.${self:provider.stage}}
      - ${self:custom.subnetId2.${self:provider.stage}}
  httpApi:
    # Payload format version (note: use quotes in YAML: '1.0' or '2.0') (default: '2.0')
    payload: "1.0"
    # Enable detailed CloudWatch metrics (default: false)
    metrics: true
    # Enable CORS HTTP headers with default settings (allow all)
    # Can be fine-tuned with specific options
    cors: true
    authorizers:
      tokenAuth:
        identitySource: $request.querystring.token
        type: request
        functionName: tokenAuth
  logs:
    # Enable HTTP API logs
    # This can either be set to `httpApi: true` to use defaults, or configured via subproperties
    # Can only be configured if the API is created by Serverless Framework
    httpApi:
      format: '{ "requestId":"$context.requestId", "ip": "$context.identity.sourceIp", "requestTime":"$context.requestTime", "httpMethod":"$context.httpMethod","routeKey":"$context.routeKey", "status":"$context.status","protocol":"$context.protocol", "responseLength":"$context.responseLength" }'

  runtime: ${env:RUNTIME, "provided.al2023"} # Use environment variable or default to 'provided.al2023'
  stage: ${opt:stage, 'dev'}
  region: "us-west-2"
  deploymentBucket:
    # Name of an existing S3 bucket used by Serverless Framework to deploy code packages
    name: fcbh-dataset-io-${self:provider.stage}
    blockPublicAccess: true

  environment:
    BIBLEBRAIN_DSN_SSM_ID: /${self:provider.stage}/dataset/sql/dsn-otc00l0j3b9ggbgc

package:
  individually: true

functions:
  tokenAuth:
    handler: .${env:HANDLER_PATH, "/cmd/httpserver"}/tokenAuthorizer # Use environment variable or default to '/cmd/httpserver'
    environment:
      DATASET_API_TOKEN: ${env:DATASET_API_TOKEN}

custom:
  stages:
    - local
    - dev
    - prod
  lambdaExecutionRoleArn:
    local: sg-local
    dev: arn:aws:iam::078432969830:role/dataset-dev-hxul4ii4m7svimec
    prod: arn:aws:iam::596282610570:role/dataset-prod-a00rjqiqazyjmgwh
  lambdaFFMPEGLayer:
    local: ffmpeg-local
    dev: arn:aws:lambda:us-west-2:078432969830:layer:ffmpeg:1
    prod: arn:aws:lambda:us-west-2:596282610570:layer:ffmpeg:1
  vpcId:
    local: vpc-local
    dev: vpc-0b6a6785e74d18db3
    prod: vpc-0720be0d173137a64
  securityGroupId:
    local: sg-local
    dev: sg-0ac7d21bdb44eb14c
    prod: sg-07ed4cf239758b0e8
  subnetId1:
    local: subnet-local
    dev: subnet-0514270361bd9075e
    prod: subnet-03350bfd970a16ba1
  subnetId2:
    local: subnet-local
    dev: subnet-058e5e5335948eaac
    prod: subnet-0e2a671cac564cd63
  ecsCluster:
    local: cluster-local
    dev: dataset-dev-otc00l0j3b9ggbgc
    prod: dataset-prod-f47v7xckyka5mznz
  ecsTaskDefinition:
    local: task-local
    dev: dataset-dev
    prod: dataset-prod
  ecsTaskContainer:
    local: task-local
    dev: dataset
    prod: dataset
  serverless-offline:
    useDocker: true
    dockerHost: host.docker.internal
    dockerNetwork: bridge
    localEnvironment: true
  s3:
    address: 0.0.0.0 # tells s3-local plugin to listen on all addresses
    directory: /tmp/s3-local
    buckets: ["my-local-bucket"]
  serverless-offline-ssm:
    stages:
      - local
    ssm:
      "/local/biblebrain/sql/dsn-otc00l0j3b9ggbgc": ${env:BIBLEBRAIN_DSN, "xxx"}
      "/local/biblebrain/mysql": ${env:BIBLEBRAIN_DSN, "xxx"}
  prune:
    automatic: true
    number: 3
  go:
    cmd: GOOS=${env:GOOS, "linux"} GOARCH=${env:GOARCH, "amd64"} CGO_ENABLED=0 go build -ldflags="-s -w" -tags lambda.norpc
    supportedRuntimes: ["provided.al2023"]
    buildProvidedRuntimeAsBootstrap: true

plugins:
  - serverless-offline-ssm
  - serverless-s3-local
  - serverless-offline
  - serverless-stage-manager
  - serverless-prune-plugin
  - serverless-go-plugin

resources:
  Resources:
    datasetSSMParameterAPIGatewayId:
      Type: AWS::SSM::Parameter
      Properties:
        Name: /${self:provider.stage}/dataset/api-gateway-id
        Type: String
        Value:
          Fn::GetAtt:
            - "HttpApi"
            - "ApiId"
        Tags:
          Environment: ${self:provider.stage}
